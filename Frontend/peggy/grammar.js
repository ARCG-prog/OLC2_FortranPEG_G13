// @generated by Peggy 4.2.0.
//
// https://peggyjs.org/
function peg$subclass(child, parent) {
    function C() { this.constructor = child; }
    C.prototype = parent.prototype;
    child.prototype = new C();
}
function peg$SyntaxError(message, expected, found, location) {
    var self = Error.call(this, message);
    // istanbul ignore next Check is a necessary evil to support older environments
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(self, peg$SyntaxError.prototype);
    }
    self.expected = expected;
    self.found = found;
    self.location = location;
    self.name = "SyntaxError";
    return self;
}
peg$subclass(peg$SyntaxError, Error);
function peg$padEnd(str, targetLength, padString) {
    padString = padString || " ";
    if (str.length > targetLength) {
        return str;
    }
    targetLength -= str.length;
    padString += padString.repeat(targetLength);
    return str + padString.slice(0, targetLength);
}
peg$SyntaxError.prototype.format = function (sources) {
    var str = "Error: " + this.message;
    if (this.location) {
        var src = null;
        var k;
        for (k = 0; k < sources.length; k++) {
            if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
            }
        }
        var s = this.location.start;
        var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
            ? this.location.source.offset(s)
            : s;
        var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
        if (src) {
            var e = this.location.end;
            var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
            var line = src[s.line - 1];
            var last = s.line === e.line ? e.column : line.length + 1;
            var hatLen = (last - s.column) || 1;
            str += "\n --> " + loc + "\n"
                + filler + " |\n"
                + offset_s.line + " | " + line + "\n"
                + filler + " | " + peg$padEnd("", s.column - 1, ' ')
                + peg$padEnd("", hatLen, "^");
        }
        else {
            str += "\n at " + loc;
        }
    }
    return str;
};
peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
        },
        class: function (expectation) {
            var escapedParts = expectation.parts.map(function (part) {
                return Array.isArray(part)
                    ? classEscape(part[0]) + "-" + classEscape(part[1])
                    : classEscape(part);
            });
            return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
        },
        any: function () {
            return "any character";
        },
        end: function () {
            return "end of input";
        },
        other: function (expectation) {
            return expectation.description;
        }
    };
    function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
    }
    function literalEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/"/g, "\\\"")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
    }
    function classEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/\]/g, "\\]")
            .replace(/\^/g, "\\^")
            .replace(/-/g, "\\-")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
    }
    function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }
    function describeExpected(expected) {
        var descriptions = expected.map(describeExpectation);
        var i, j;
        descriptions.sort();
        if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                    descriptions[j] = descriptions[i];
                    j++;
                }
            }
            descriptions.length = j;
        }
        switch (descriptions.length) {
            case 1:
                return descriptions[0];
            case 2:
                return descriptions[0] + " or " + descriptions[1];
            default:
                return descriptions.slice(0, -1).join(", ")
                    + ", or "
                    + descriptions[descriptions.length - 1];
        }
    }
    function describeFound(found) {
        return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }
    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};
function peg$parse(input, options) {
    options = options !== undefined ? options : {};
    var peg$FAILED = {};
    var peg$source = options.grammarSource;
    var peg$startRuleFunctions = { inicio: peg$parseinicio };
    var peg$startRuleFunction = peg$parseinicio;
    var peg$c0 = "=";
    var peg$c1 = "/";
    var peg$c2 = ";";
    var peg$c3 = "\"";
    var peg$c4 = "'";
    var peg$c5 = "@";
    var peg$c6 = ":";
    var peg$c7 = "|";
    var peg$c8 = "..";
    var peg$c9 = ",";
    var peg$c10 = "(";
    var peg$c11 = ")";
    var peg$c12 = ".";
    var peg$c13 = "[";
    var peg$c14 = "]";
    var peg$c15 = "//";
    var peg$c16 = "/*";
    var peg$c17 = "*/";
    var peg$c18 = "xd3";
    var peg$r0 = /^[^"]/;
    var peg$r1 = /^[^']/;
    var peg$r2 = /^[!$&]/;
    var peg$r3 = /^[*-+?]/;
    var peg$r4 = /^[0-9A-Za-z]/;
    var peg$r5 = /^[0-9]/;
    var peg$r6 = /^[^\]]/;
    var peg$r7 = /^[_a-z]/i;
    var peg$r8 = /^[_a-z0-9]/i;
    var peg$r9 = /^[\n\r]/;
    var peg$r10 = /^[ \t]/;
    var peg$r11 = /^[ \t\n\r]/;
    var peg$r12 = /^[\n]/;
    var peg$e0 = peg$literalExpectation("=", false);
    var peg$e1 = peg$literalExpectation("/", false);
    var peg$e2 = peg$literalExpectation(";", false);
    var peg$e3 = peg$literalExpectation("\"", false);
    var peg$e4 = peg$classExpectation(["\""], true, false);
    var peg$e5 = peg$literalExpectation("'", false);
    var peg$e6 = peg$classExpectation(["'"], true, false);
    var peg$e7 = peg$literalExpectation("@", false);
    var peg$e8 = peg$classExpectation(["!", "$", "&"], false, false);
    var peg$e9 = peg$literalExpectation(":", false);
    var peg$e10 = peg$classExpectation([["*", "+"], "?"], false, false);
    var peg$e11 = peg$literalExpectation("|", false);
    var peg$e12 = peg$literalExpectation("..", false);
    var peg$e13 = peg$literalExpectation(",", false);
    var peg$e14 = peg$literalExpectation("(", false);
    var peg$e15 = peg$literalExpectation(")", false);
    var peg$e16 = peg$literalExpectation(".", false);
    var peg$e17 = peg$classExpectation([["0", "9"], ["A", "Z"], ["a", "z"]], false, false);
    var peg$e18 = peg$classExpectation([["0", "9"]], false, false);
    var peg$e19 = peg$literalExpectation("[", false);
    var peg$e20 = peg$classExpectation(["]"], true, false);
    var peg$e21 = peg$literalExpectation("]", false);
    var peg$e22 = peg$classExpectation(["_", ["a", "z"]], false, true);
    var peg$e23 = peg$classExpectation(["_", ["a", "z"], ["0", "9"]], false, true);
    var peg$e24 = peg$classExpectation(["\n", "\r"], false, false);
    var peg$e25 = peg$classExpectation([" ", "\t"], false, false);
    var peg$e26 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
    var peg$e27 = peg$literalExpectation("//", false);
    var peg$e28 = peg$classExpectation(["\n"], false, false);
    var peg$e29 = peg$anyExpectation();
    var peg$e30 = peg$literalExpectation("/*", false);
    var peg$e31 = peg$literalExpectation("*/", false);
    var peg$e32 = peg$literalExpectation("xd3", false);
    var peg$currPos = options.peg$currPos | 0;
    var peg$savedPos = peg$currPos;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = peg$currPos;
    var peg$maxFailExpected = options.peg$maxFailExpected || [];
    var peg$silentFails = options.peg$silentFails | 0;
    var peg$result;
    if (options.startRule) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }
    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }
    function offset() {
        return peg$savedPos;
    }
    function range() {
        return {
            source: peg$source,
            start: peg$savedPos,
            end: peg$currPos
        };
    }
    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }
    function expected(description, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
    }
    function error(message, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location);
    }
    function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase };
    }
    function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }
    function peg$anyExpectation() {
        return { type: "any" };
    }
    function peg$endExpectation() {
        return { type: "end" };
    }
    function peg$otherExpectation(description) {
        return { type: "other", description: description };
    }
    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
            return details;
        }
        else {
            if (pos >= peg$posDetailsCache.length) {
                p = peg$posDetailsCache.length - 1;
            }
            else {
                p = pos;
                while (!peg$posDetailsCache[--p]) { }
            }
            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };
            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                }
                else {
                    details.column++;
                }
                p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
        }
    }
    function peg$computeLocation(startPos, endPos, offset) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        var res = {
            source: peg$source,
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
        if (offset && peg$source && (typeof peg$source.offset === "function")) {
            res.start = peg$source.offset(res.start);
            res.end = peg$source.offset(res.end);
        }
        return res;
    }
    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }
        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected);
    }
    function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
    }
    function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }
    function peg$parseinicio() {
        var s0;
        s0 = peg$parsereglas();
        return s0;
    }
    function peg$parsereglas() {
        var s0, s1, s2, s3, s4, s5;
        s0 = [];
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseε();
        if (s4 !== peg$FAILED) {
            s5 = peg$parsew();
            s4 = [s4, s5];
            s3 = s4;
        }
        else {
            peg$currPos = s3;
            s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parseε();
            if (s4 !== peg$FAILED) {
                s5 = peg$parsew();
                s4 = [s4, s5];
                s3 = s4;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
        }
        s3 = peg$parseregla();
        if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$currPos;
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parseε();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parsew();
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parseε();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parsew();
                        s4 = [s4, s5];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                s3 = peg$parseregla();
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
        }
        else {
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseregla() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;
        s0 = peg$currPos;
        s1 = peg$parseidentificador();
        if (s1 !== peg$FAILED) {
            s2 = peg$parsew();
            s3 = peg$parsealias();
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            s4 = peg$parsecomw();
            if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c0;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e0);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parsecomw();
                s7 = peg$parseproduccion();
                if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$currPos;
                    s10 = peg$parsecomw();
                    if (input.charCodeAt(peg$currPos) === 47) {
                        s11 = peg$c1;
                        peg$currPos++;
                    }
                    else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e1);
                        }
                    }
                    if (s11 !== peg$FAILED) {
                        s12 = peg$parsecomw();
                        s13 = peg$parseproduccion();
                        if (s13 !== peg$FAILED) {
                            s10 = [s10, s11, s12, s13];
                            s9 = s10;
                        }
                        else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                    }
                    while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$currPos;
                        s10 = peg$parsecomw();
                        if (input.charCodeAt(peg$currPos) === 47) {
                            s11 = peg$c1;
                            peg$currPos++;
                        }
                        else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e1);
                            }
                        }
                        if (s11 !== peg$FAILED) {
                            s12 = peg$parsecomw();
                            s13 = peg$parseproduccion();
                            if (s13 !== peg$FAILED) {
                                s10 = [s10, s11, s12, s13];
                                s9 = s10;
                            }
                            else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                        }
                    }
                    s9 = peg$currPos;
                    s10 = peg$parsecomw();
                    if (input.charCodeAt(peg$currPos) === 59) {
                        s11 = peg$c2;
                        peg$currPos++;
                    }
                    else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e2);
                        }
                    }
                    if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                    }
                    else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                        s9 = null;
                    }
                    s10 = [];
                    s11 = peg$currPos;
                    s12 = peg$parsew();
                    s13 = peg$parseε();
                    if (s13 !== peg$FAILED) {
                        s12 = [s12, s13];
                        s11 = s12;
                    }
                    else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                    }
                    while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$currPos;
                        s12 = peg$parsew();
                        s13 = peg$parseε();
                        if (s13 !== peg$FAILED) {
                            s12 = [s12, s13];
                            s11 = s12;
                        }
                        else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                        }
                    }
                    s11 = peg$parsew_newline();
                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsealias() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c3;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e3);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = input.charAt(peg$currPos);
            if (peg$r0.test(s3)) {
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e4);
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = input.charAt(peg$currPos);
                if (peg$r0.test(s3)) {
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e4);
                    }
                }
            }
            if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c3;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                }
            }
            if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c4;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = input.charAt(peg$currPos);
                if (peg$r1.test(s3)) {
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e6);
                    }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = input.charAt(peg$currPos);
                    if (peg$r1.test(s3)) {
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e6);
                        }
                    }
                }
                if (input.charCodeAt(peg$currPos) === 39) {
                    s3 = peg$c4;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e5);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseproduccion() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parsesecuencia();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parsecomw();
            if (input.charCodeAt(peg$currPos) === 47) {
                s5 = peg$c1;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e1);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parsecomw();
                s7 = peg$parsesecuencia();
                if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parsecomw();
                if (input.charCodeAt(peg$currPos) === 47) {
                    s5 = peg$c1;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e1);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parsecomw();
                    s7 = peg$parsesecuencia();
                    if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            s1 = [s1, s2];
            s0 = s1;
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsesecuencia() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parseprefijo();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parsecom_();
            s5 = peg$parseprefijo();
            if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parsecom_();
                s5 = peg$parseprefijo();
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            s1 = [s1, s2];
            s0 = s1;
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseprefijo() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c5;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e7);
            }
        }
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        s2 = peg$parsenombrexp();
        if (s2 === peg$FAILED) {
            s2 = null;
        }
        s3 = peg$parse_();
        s4 = input.charAt(peg$currPos);
        if (peg$r2.test(s4)) {
            peg$currPos++;
        }
        else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e8);
            }
        }
        if (s4 === peg$FAILED) {
            s4 = null;
        }
        s5 = peg$parsecom_();
        s6 = peg$parsesufijo();
        if (s6 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4, s5, s6];
            s0 = s1;
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsesufijo() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = peg$parseprimario();
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomw();
            s4 = peg$parseoperador_repeticion();
            if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
                s2 = null;
            }
            s1 = [s1, s2];
            s0 = s1;
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsenombrexp() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parseidentificador();
        if (s1 !== peg$FAILED) {
            s2 = peg$parsew();
            if (input.charCodeAt(peg$currPos) === 58) {
                s3 = peg$c6;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e9);
                }
            }
            if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseoperador_repeticion() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;
        s0 = input.charAt(peg$currPos);
        if (peg$r3.test(s0)) {
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e10);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 124) {
                s1 = peg$c7;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e11);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsew();
                s3 = peg$parsenumero();
                if (s3 === peg$FAILED) {
                    s3 = peg$parseidentificador();
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parsew();
                    if (input.charCodeAt(peg$currPos) === 124) {
                        s5 = peg$c7;
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e11);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5];
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 124) {
                    s1 = peg$c7;
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e11);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsew();
                    s3 = peg$parsenumero();
                    if (s3 === peg$FAILED) {
                        s3 = peg$parseidentificador();
                    }
                    if (s3 === peg$FAILED) {
                        s3 = null;
                    }
                    s4 = peg$parsew();
                    if (input.substr(peg$currPos, 2) === peg$c8) {
                        s5 = peg$c8;
                        peg$currPos += 2;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e12);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsew();
                        s7 = peg$parsenumero();
                        if (s7 === peg$FAILED) {
                            s7 = peg$parseidentificador();
                        }
                        if (s7 === peg$FAILED) {
                            s7 = null;
                        }
                        s8 = peg$parsew();
                        if (input.charCodeAt(peg$currPos) === 124) {
                            s9 = peg$c7;
                            peg$currPos++;
                        }
                        else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e11);
                            }
                        }
                        if (s9 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 124) {
                        s1 = peg$c7;
                        peg$currPos++;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e11);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsew();
                        s3 = peg$parsenumero();
                        if (s3 === peg$FAILED) {
                            s3 = peg$parseidentificador();
                        }
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        s4 = peg$parsew();
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c9;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e13);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsew();
                            s7 = peg$parseproduccion();
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parsew();
                                if (input.charCodeAt(peg$currPos) === 124) {
                                    s9 = peg$c7;
                                    peg$currPos++;
                                }
                                else {
                                    s9 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$e11);
                                    }
                                }
                                if (s9 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                                    s0 = s1;
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 124) {
                            s1 = peg$c7;
                            peg$currPos++;
                        }
                        else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e11);
                            }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsew();
                            s3 = peg$parsenumero();
                            if (s3 === peg$FAILED) {
                                s3 = peg$parseidentificador();
                            }
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            s4 = peg$parsew();
                            if (input.substr(peg$currPos, 2) === peg$c8) {
                                s5 = peg$c8;
                                peg$currPos += 2;
                            }
                            else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e12);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsew();
                                s7 = peg$parsenumero();
                                if (s7 === peg$FAILED) {
                                    s7 = peg$parseidentificador();
                                }
                                if (s7 === peg$FAILED) {
                                    s7 = null;
                                }
                                s8 = peg$parsew();
                                if (input.charCodeAt(peg$currPos) === 44) {
                                    s9 = peg$c9;
                                    peg$currPos++;
                                }
                                else {
                                    s9 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$e13);
                                    }
                                }
                                if (s9 !== peg$FAILED) {
                                    s10 = peg$parsew();
                                    s11 = peg$parseproduccion();
                                    if (s11 !== peg$FAILED) {
                                        s12 = peg$parsew();
                                        if (input.charCodeAt(peg$currPos) === 124) {
                                            s13 = peg$c7;
                                            peg$currPos++;
                                        }
                                        else {
                                            s13 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$e11);
                                            }
                                        }
                                        if (s13 !== peg$FAILED) {
                                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                                            s0 = s1;
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseprimario() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$parseidentificador();
        if (s0 === peg$FAILED) {
            s0 = peg$parseliteral();
            if (s0 === peg$FAILED) {
                s0 = peg$parseclase_caracteres();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsepunto();
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s1 = peg$c10;
                            peg$currPos++;
                        }
                        else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e14);
                            }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsecomw();
                            s3 = peg$parseproduccion();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsecomw();
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c11;
                                    peg$currPos++;
                                }
                                else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$e15);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5];
                                    s0 = s1;
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parsepunto() {
        var s0;
        if (input.charCodeAt(peg$currPos) === 46) {
            s0 = peg$c12;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e16);
            }
        }
        return s0;
    }
    function peg$parseagrupacion() {
        var s0;
        s0 = input.charAt(peg$currPos);
        if (peg$r4.test(s0)) {
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e17);
            }
        }
        return s0;
    }
    function peg$parsenumero() {
        var s0, s1;
        s0 = [];
        s1 = input.charAt(peg$currPos);
        if (peg$r5.test(s1)) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e18);
            }
        }
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = input.charAt(peg$currPos);
                if (peg$r5.test(s1)) {
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e18);
                    }
                }
            }
        }
        else {
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseliteral() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c3;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e3);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = input.charAt(peg$currPos);
            if (peg$r0.test(s3)) {
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e4);
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = input.charAt(peg$currPos);
                if (peg$r0.test(s3)) {
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e4);
                    }
                }
            }
            if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c3;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                }
            }
            if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c4;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = input.charAt(peg$currPos);
                if (peg$r1.test(s3)) {
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e6);
                    }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = input.charAt(peg$currPos);
                    if (peg$r1.test(s3)) {
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e6);
                        }
                    }
                }
                if (input.charCodeAt(peg$currPos) === 39) {
                    s3 = peg$c4;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e5);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseclase_caracteres() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c13;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e19);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = input.charAt(peg$currPos);
            if (peg$r6.test(s3)) {
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e20);
                }
            }
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = input.charAt(peg$currPos);
                    if (peg$r6.test(s3)) {
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e20);
                        }
                    }
                }
            }
            else {
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                    s3 = peg$c14;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e21);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseidentificador() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = input.charAt(peg$currPos);
        if (peg$r7.test(s1)) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e22);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = input.charAt(peg$currPos);
            if (peg$r8.test(s3)) {
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e23);
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = input.charAt(peg$currPos);
                if (peg$r8.test(s3)) {
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e23);
                    }
                }
            }
            s1 = [s1, s2];
            s0 = s1;
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsew_newline() {
        var s0, s1;
        s0 = [];
        s1 = peg$parsew_blank();
        if (s1 === peg$FAILED) {
            s1 = peg$parsenewline();
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parsew_blank();
            if (s1 === peg$FAILED) {
                s1 = peg$parsenewline();
            }
        }
        return s0;
    }
    function peg$parsenewline() {
        var s0, s1;
        s0 = [];
        s1 = input.charAt(peg$currPos);
        if (peg$r9.test(s1)) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e24);
            }
        }
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = input.charAt(peg$currPos);
                if (peg$r9.test(s1)) {
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e24);
                    }
                }
            }
        }
        else {
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parse_() {
        var s0, s1;
        s0 = [];
        s1 = input.charAt(peg$currPos);
        if (peg$r10.test(s1)) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e25);
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = input.charAt(peg$currPos);
            if (peg$r10.test(s1)) {
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e25);
                }
            }
        }
        return s0;
    }
    function peg$parsew() {
        var s0, s1;
        s0 = [];
        s1 = input.charAt(peg$currPos);
        if (peg$r11.test(s1)) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e26);
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = input.charAt(peg$currPos);
            if (peg$r11.test(s1)) {
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e26);
                }
            }
        }
        return s0;
    }
    function peg$parsew_blank() {
        var s0, s1;
        s0 = [];
        s1 = input.charAt(peg$currPos);
        if (peg$r10.test(s1)) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e25);
            }
        }
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = input.charAt(peg$currPos);
                if (peg$r10.test(s1)) {
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e25);
                    }
                }
            }
        }
        else {
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsecomw() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$parsew();
        s4 = peg$parseε();
        if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
        }
        else {
            peg$currPos = s2;
            s2 = peg$FAILED;
        }
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            s3 = peg$parsew();
            s4 = peg$parseε();
            if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
        }
        s2 = peg$parsew();
        s1 = [s1, s2];
        s0 = s1;
        return s0;
    }
    function peg$parsecom_() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$parse_();
        s4 = peg$parseε2();
        if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
        }
        else {
            peg$currPos = s2;
            s2 = peg$FAILED;
        }
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            s3 = peg$parse_();
            s4 = peg$parseε2();
            if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
        }
        s2 = peg$parse_();
        s1 = [s1, s2];
        s0 = s1;
        return s0;
    }
    function peg$parseε() {
        var s0;
        s0 = peg$parseε1();
        if (s0 === peg$FAILED) {
            s0 = peg$parseε2();
        }
        return s0;
    }
    function peg$parseε1() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c15) {
            s1 = peg$c15;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e27);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = input.charAt(peg$currPos);
            if (peg$r12.test(s5)) {
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e28);
                }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
                s4 = undefined;
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e29);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = input.charAt(peg$currPos);
                if (peg$r12.test(s5)) {
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e28);
                    }
                }
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                    s4 = undefined;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e29);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            s1 = [s1, s2];
            s0 = s1;
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseε2() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c16) {
            s1 = peg$c16;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e30);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c17) {
                s5 = peg$c17;
                peg$currPos += 2;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
                s4 = undefined;
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e29);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 2) === peg$c17) {
                    s5 = peg$c17;
                    peg$currPos += 2;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e31);
                    }
                }
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                    s4 = undefined;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e29);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            if (input.substr(peg$currPos, 2) === peg$c17) {
                s3 = peg$c17;
                peg$currPos += 2;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                }
            }
            if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsexd() {
        var s0;
        if (input.substr(peg$currPos, 3) === peg$c18) {
            s0 = peg$c18;
            peg$currPos += 3;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e32);
            }
        }
        return s0;
    }
    peg$result = peg$startRuleFunction();
    if (options.peg$library) {
        return /** @type {any} */ ({
            peg$result,
            peg$currPos,
            peg$FAILED,
            peg$maxFailExpected,
            peg$maxFailPos
        });
    }
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    }
    else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
}
const peg$allowedStartRules = [
    "inicio"
];
export { peg$allowedStartRules as StartRules, peg$SyntaxError as SyntaxError, peg$parse as parse };
